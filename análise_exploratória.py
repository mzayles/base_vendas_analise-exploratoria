# -*- coding: utf-8 -*-
"""002_ANÁLISE-EXPLORATÓRIA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oXNF6aU90cBYFl15HndGpkqEcD6m7vkM

# **ANÁLISE EXPLORATÓRIA**

Vamos aprender a como utilizar as principais funcionalidades do Pandas
    para entender melhor os dados que iremos analisar (identificar problemas).

    Preparação de dados (DataPrep)

    - Valores faltantes: valores nulos
    - Valores duplicados
    - Conversão de tipos de dados (int, float, object ou string, bool)
    - Transposição (colunas > linhas; linhas > colunas)
"""

import pandas as pd

df = pd.read_csv('base_vendas.csv')
df.head()

# retorna as últimas cinco linhas
df.tail()

# tipo DataFrame
# estrutura de dados do Pandas
# uma matriz que possui 2 dimensões (linhas e colunas)
# pode ter diversos tipos de dados (string, num, data, bool)
# cada coluna possui apenas um tipo de dado (ex: todas as linhas de uma coluna são decimais)
# é mutável: é possível manipular, criar, inserir, excluir, entre outros
# é composto por colunas, índices e valores

type(df)

# acessar uma coluna específica
df.matricula_funcionario

# acessar uma coluna sem padronização
# problema identificado: não há padronização no nome das colunas

df['Nome Funcionario']

# tipo series
type(df['Nome Funcionario'])

# índices
df.index

# retorna o nome de todas as colunas
df.columns

# list: []

colunas = ['matricula_funcionario', 'nome_funcionario', 'cargo', 'codigo_loja',
       'nome_loja', 'codigo_produto', 'descricao_produto', 'categoria',
       'preco_custo', 'valor_unitario', 'quantidade', 'comissao', 'dt_venda',
       'dt_entrega']
type(colunas)

# modificar o nome das colunas

df.columns = colunas
df.head()

# total de linhas e colunas
# tuple: ()
# imutável

type(df.shape)

qtd_linhas = df.shape[0]
qtd_colunas = df.shape[1]

# análise do negócio
# problema em comissão
# criar uma nova coluna para o valor de faturamento > valor_unitario * quantidade
# converter objeto para inteiro

df.info()

# primeiras estatísticas dos dados
# somente variáveis númericas
# maior e menor juros cadastrados
# mean: média
# std: desvio padrão
# quartiz: 25% de X vendas tem Y quantidade vendida
# especialista de negócio

df.describe().round(1)

# estatísticas com variáveis de texto
# unique: deduzir que são 12 funcionários
# top: mais se repete > José Maria
# freq: com que frequência se repete > 280
# uma coluna não tem relação com a outra > loja matriz não tem relação com aspirador de pó

df.describe(include = object)

# analisar coluna específica
df.quantidade.describe().round(2)

df[['quantidade', 'matricula_funcionario']].describe().round(1)

# valores nulos - isna() ou isnull()
# somar a quantidade de registros nulos
# percentual de dados faltantes

df.isnull().sum() / qtd_linhas * 100

# valores duplicados - duplicated()
df.duplicated().sum()

# repetição na quantidade
# mesmo funcionário vendeu produtos com a mesma quantidade

df[['quantidade', 'matricula_funcionario']].duplicated().sum()

# vendas por produto
df.quantidade.value_counts()

# conversão
df.info()

df.valor_unitario
